# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Coffee Shop â˜•

on:
  push:
    branches: [ "master" ]
#    paths:
#      - CoffeeShop # all that is inside root folder

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven
      - name: Build with Maven with test Skipping
        env:
          SPRING_MAIL_USERNAME: ${{ secrets.SPRING_MAIL_USERNAME }}
          SPRING_MAIL_PASSWORD: ${{ secrets.SPRING_MAIL_PASSWORD }}
        run: mvn clean package -Dmaven.test.skip

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: maven
      - name: Run tests with Maven
        run: mvn test

  docker:
    runs-on: ubuntu-latest
    needs: [ "build", "test" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/coffee-shop:1.0 .

      - name: Push Docker image to DockerHub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/coffee-shop:1.0

#  deploy:
#    name: Deploy app
#    runs-on: ubuntu-latest
#    needs: docker
#    steps:
#      - name: Create deployment folder called ci-cd if not exist
##        ssh username@ip_address
#        run: ssh ${{ secrets.vps_username }}@${{ secrets.vps_ip_address }} "mkdir -p ci-cd"
#
#      - name: Copy docker-compose file
#        run: scp docker-compose.yml ${{ secrets.vps_username }}@${{ secrets.vps_ip_address }}:ci-cd/docker-compose.yml
#
#      - name: Set ENV variables to server & deploy app
#        run: |
#          ssh ${{ secrets.vps_username }}@${{ secrets.vps_ip_address }} <<EOF
#          export EMAIL_HOSTNAME=${{ secrets.EMAIL_HOSTNAME }}
#          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
#          export EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
#          cd ci-cd
#          docker-compose -f docker-compose.yml pull -q
#          docker-compose -f docker-compose.yml up -d
#          EOF